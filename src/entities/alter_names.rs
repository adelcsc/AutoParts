//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use std::collections::HashMap;
use async_graphql::async_trait::async_trait;
use async_graphql::dataloader::{DataLoader, Loader};
use async_graphql::{ComplexObject, Context, InputObject, Object, SimpleObject};
use itertools::Itertools;
use sea_orm::{DbBackend, EntityTrait, QuerySelect, QueryTrait};
use sea_orm::Condition;
use sea_orm::entity::prelude::*;
use macros::FilterQueryBuilder;
use crate::entities::{DLoader, Paging, Query, SqliteLoader};
use crate::entities::places::Column::Col;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="AlterName",complex)]
#[sea_orm(table_name = "alter_names")]
pub struct Model {
    pub part_id: i32,
    pub name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
}
#[derive(Clone, Debug, PartialEq,Eq,Hash,Default,InputObject,FilterQueryBuilder)]
#[graphql(name="AlterNameInput")]
pub struct ModelInput {
    pub part_id: Option<i32>,
    pub name: Option<String>,
    pub id: Option<i32>,
    pub page: Option<Paging>
}

#[ComplexObject]
impl Model {
    async fn partName(&self,ctx:&Context<'_>,like : Option<super::part_names::ModelInput>) -> super::part_names::Model{
        let loader = ctx.data_unchecked::<DLoader>();
        if let Some(mut model) = like{
            model.id = Some(self.part_id);
            match loader.load_one(model).await.unwrap().unwrap().get(0) {
                None => {return super::part_names::Model::default()}
                Some(found) => {return found.to_owned()}
            }
        }
        loader.load_one(super::part_names::ModelInput{id:Some(self.part_id),..super::part_names::ModelInput::default()}).await.unwrap().unwrap().get(0).unwrap().to_owned()
    }
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::part_names::Entity",
        from = "Column::PartId",
        to = "super::part_names::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PartNames,
}

impl Related<super::part_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartNames.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
