//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;
use async_graphql::{ComplexObject, InputObject, SimpleObject};
use macros::FilterQueryBuilder;
use std::collections::HashMap;
use crate::entities::Paging;
use async_graphql::dataloader::{DataLoader, Loader};
use async_graphql::*;
use itertools::Itertools;
use sea_orm::*;
use crate::SqliteLoader;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="Car",complex)]
#[sea_orm(table_name = "cars")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub car_name: String,
    pub brand_id: i32,
}

#[derive(Clone, Debug, PartialEq,Eq,Hash,Default,InputObject,FilterQueryBuilder)]
#[graphql(name="CarInput")]
pub struct ModelInput {
    pub id: Option<i32>,
    pub car_name: Option<String>,
    pub brand_id: Option<i32>,
    pub page : Option<Paging>,
    #[join(Relation::CarBrands.def())]
    #[one(car_brands,brand_id)]
    pub car_brand :Option<super::car_brands::ModelInput>,
    #[join(Relation::CarSeries.def())]
    #[vec(car_series,car_id)]
    pub car_series : Option<super::car_series::ModelInput>,
    #[join(Relation::ItemCar.def(),super::item_car::Relation::Items.def())]
    #[many(items,item_id,car_id,item_car)]
    pub items : Option<super::items::ModelInput>
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::car_brands::Entity",
        from = "Column::BrandId",
        to = "super::car_brands::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    CarBrands,
    #[sea_orm(has_many = "super::car_series::Entity")]
    CarSeries,
    #[sea_orm(has_many = "super::item_car::Entity")]
    ItemCar,
}

impl Related<super::car_brands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CarBrands.def()
    }
}

impl Related<super::car_series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CarSeries.def()
    }
}

impl Related<super::item_car::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemCar.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
