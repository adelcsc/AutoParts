//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use std::cmp::Ordering;
use std::collections::HashMap;
use async_graphql::dataloader::{DataLoader, Loader};
use async_graphql::*;
use itertools::Itertools;
use sea_orm::*;
use sea_orm::entity::prelude::*;
use sea_orm::sea_query::UnionType;
use macros::FilterQueryBuilder;
use crate::entities::Paging;
use crate::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="PartName",complex)]
#[sea_orm(table_name = "part_names")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
}
#[derive(Clone, Debug, PartialEq,Eq,Hash,Default,InputObject,FilterQueryBuilder)]
#[graphql(name="PartNameInput")]
pub struct ModelInput {
    pub id: Option<i32>,
    pub name: Option<String>,
    pub page : Option<Paging>,
    #[join(Relation::AlterNames.def())]
    #[vec(alter_names,part_id)]
    pub alter_name: Option<super::alter_names::ModelInput>
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alter_names::Entity")]
    AlterNames,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
}

impl Related<super::alter_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlterNames.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {

}
