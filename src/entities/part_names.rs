//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use std::collections::HashMap;
use async_graphql::{ComplexObject, Context, InputObject, SimpleObject};
use async_graphql::async_trait::async_trait;
use async_graphql::dataloader::{DataLoader, Loader};
use itertools::Itertools;
use sea_orm::{Condition, DbBackend, QueryTrait};
use sea_orm::entity::prelude::*;
use crate::entities::DLoader;
use crate::SqliteLoader;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="PartName",complex)]
#[sea_orm(table_name = "part_names")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
}
#[derive(Clone, Debug, PartialEq,Eq,Hash,Default,InputObject)]
#[graphql(name="PartNameInput")]
pub struct ModelInput {
    pub id: Option<i32>,
    pub name: Option<String>,
}
#[ComplexObject]
impl Model {
    async fn alterNames(&self,ctx:&Context<'_>,like : Option<super::alter_names::ModelInput>) -> Vec<super::alter_names::Model>{
        let loader = ctx.data_unchecked::<DLoader>();
        match like {
            None => {return super::alter_names::Entity::find().all(&loader.loader().pool).await.unwrap();}
            Some(like) => {return loader.load_one(like).await.unwrap().unwrap();}
        }
    }
}

#[async_trait]
impl Loader<ModelInput> for SqliteLoader {
    type Value = Vec<Model>;
    type Error = ();

    async fn load(&self, keys: &[ModelInput]) -> Result<HashMap<ModelInput, Self::Value>, Self::Error> {
        let mut condition = Condition::any();
        let mut rs : HashMap<ModelInput,Vec<Model>> = HashMap::new();
        for key in keys {
            let mut cond = Condition::all();
            if let Some(id)=key.id {
                cond=cond.add(Column::Id.eq(id));
            }
            if let Some(name)=&key.name {
                cond=cond.add(Column::Name.like(name));
            }
            condition=condition.add(cond);
        }
        let db_result = Entity::find().filter(condition).all(&self.pool).await.unwrap();
        for key in keys {
            let res= db_result.iter().filter(|item| {
                let mut is_it =true;
                if let Some(id)=key.id {
                    is_it =id==item.id;
                }
                if let Some(name)=&key.name {
                    is_it =item.name.contains(name.replace("%","").as_str());
                }
                is_it
            }).map(|found| {
                found.clone()
            }).collect_vec();
            rs.insert(key.to_owned(),res);
        }
        Ok(rs)
    }
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alter_names::Entity")]
    AlterNames,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
}

impl Related<super::alter_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlterNames.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
