//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use async_graphql::{ComplexObject, Context, SimpleObject};
use async_graphql::dataloader::DataLoader;
use sea_orm::entity::prelude::*;
use crate::SqliteLoader;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="PartName",complex)]
#[sea_orm(table_name = "part_names")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub name: String,
}
#[ComplexObject]
impl Model {
    async fn alterNames(&self,ctx:&Context<'_>) -> Vec<super::alter_names::Model>{
        let loader = ctx.data_unchecked::<DataLoader<SqliteLoader>>();
        loader.load_one(super::alter_names::Model{part_id:self.id,..super::alter_names::Model::default()}).await.unwrap().unwrap()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alter_names::Entity")]
    AlterNames,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
}

impl Related<super::alter_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlterNames.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
