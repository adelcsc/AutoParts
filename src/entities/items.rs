//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use std::collections::HashMap;
use async_graphql::{ComplexObject, InputObject, SimpleObject};
use async_graphql::async_trait::async_trait;
use async_graphql::dataloader::Loader;
use itertools::Itertools;
use sea_orm::Condition;
use sea_orm::entity::prelude::*;
use crate::SqliteLoader;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Eq,Hash,SimpleObject,Default)]
#[graphql(name="Item",complex)]
#[sea_orm(table_name = "items")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub part_id: i32,
    pub c_bar: i32,
    pub price: i32,
    pub buy_id: i32,
    pub part_brand_id: i32,
}
#[derive(Clone, Debug, PartialEq,Eq,Hash,Default,InputObject)]
#[graphql(name="ItemInput")]
pub struct ModelInput {
    pub id: i32,
    pub part_id: i32,
    pub c_bar: i32,
    pub price: i32,
    pub buy_id: i32,
    pub part_brand_id: i32,
}
#[ComplexObject]
impl Model {

}
#[async_trait]
impl Loader<ModelInput> for SqliteLoader {
    type Value = Vec<Model>;
    type Error = ();

    async fn load(&self, keys: &[ModelInput]) -> Result<HashMap<ModelInput, Self::Value>, Self::Error> {
        let mut condition = Condition::any();
        let mut rs : HashMap<ModelInput,Vec<Model>> = HashMap::new();
        for key in keys {
            let mut cond = Condition::all();

            condition=condition.add(cond);
        }
        let db_result = Entity::find().filter(condition).all(&self.pool).await.unwrap();
        for key in keys {
            let res= db_result.iter().filter(|item| {
                let mut is_it =true;

                is_it
            }).map(|found| {
                found.clone()
            }).collect_vec();
            rs.insert(key.to_owned(),res);
        }
        Ok(rs)
    }
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::part_brands::Entity",
        from = "Column::PartBrandId",
        to = "super::part_brands::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PartBrands,
    #[sea_orm(
        belongs_to = "super::buy_history::Entity",
        from = "Column::BuyId",
        to = "super::buy_history::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    BuyHistory,
    #[sea_orm(
        belongs_to = "super::part_names::Entity",
        from = "Column::PartId",
        to = "super::part_names::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PartNames,
    #[sea_orm(has_many = "super::place_item::Entity")]
    PlaceItem,
    #[sea_orm(has_many = "super::item_car::Entity")]
    ItemCar,
    #[sea_orm(has_many = "super::item_feedback::Entity")]
    ItemFeedback,
    #[sea_orm(has_many = "super::item_order::Entity")]
    ItemOrder,
}

impl Related<super::part_brands::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartBrands.def()
    }
}

impl Related<super::buy_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BuyHistory.def()
    }
}

impl Related<super::part_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartNames.def()
    }
}

impl Related<super::place_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaceItem.def()
    }
}

impl Related<super::item_car::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemCar.def()
    }
}

impl Related<super::item_feedback::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFeedback.def()
    }
}

impl Related<super::item_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemOrder.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
